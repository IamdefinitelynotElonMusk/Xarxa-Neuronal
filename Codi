import tensorflow as tf
import tensorflow_datasets as tfds

datos, metadatos = tfds.load('fashion_mnist', as_supervised=True, with_info=True)

metadatos

datos_entrenamiento, datos_pruebas = datos['train'], datos['test']

nombres_clases = metadatos.features['label'].names

nombres_clases

def normalizar(imagenes, etiquetas):
  imagenes = tf.cast(imagenes, tf.float32)
  imagenes /= 225
  return imagenes, etiquetas

  datos_entrenamiento = datos_entrenamiento.map(normalizar)
  datos_pruebas = datos_pruebas.map(normalizar)

  datos_entrenamiento = datos_entrenamiento.cache()
  datos_pruebas = datos_pruebas.cache()

for imagen, etiqueta in datos_entrenamiento.take(1):
  break
  imagen = imagen.numpy().reshape((28,28))

  import matplotlib.pyplot as plt

  plt.figure()
  plt.imshow(imagen, cmap=plt.cm.binary)
  plt.colorbar()
  plt.grid(False)
  plt.show()

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 10))
for i, (imagen, etiqueta) in enumerate(datos_entrenamiento.take(25)):
    imagen = imagen.numpy().reshape((28, 28))
    plt.subplot(5, 5, i + 1)
    plt.imshow(imagen, cmap='gray')
    plt.xticks([])
    plt.yticks([])
    plt.title(f"Etiqueta: {etiqueta.numpy()}")
plt.show()


modelo = tf.keras.Sequential([
    tf.keras.layers.Flatten(input_shape=(28,28,1)),
    tf.keras.layers.Dense(50,activation=tf.nn.relu),
    tf.keras.layers.Dense(50,activation=tf.nn.relu),
    tf.keras.layers.Dense(10,activation=tf.nn.softmax)
])

modelo.compile(
    optimizer='adam',
    loss=tf.keras.losses.SparseCategoricalCrossentropy(),
    metrics=['accuracy']
)

import tensorflow_datasets as tfds

metadatos, info = tfds.load('mnist', with_info=True)

num_ej_entrenamiento = info.splits['train'].num_examples
num_ej_pruebas = info.splits['test'].num_examples

print(f"Ejemplos de entrenamiento: {num_ej_entrenamiento}")
print(f"Ejemplos de prueba: {num_ej_pruebas}")


import tensorflow as tf

TAMANO_LOTE = 32
num_ej_entrenamiento = 60000

datos = {}

datos['train'] = tf.data.Dataset.from_tensor_slices(['train']).repeat().shuffle(num_ej_entrenamiento).batch(TAMANO_LOTE)
datos['test'] = tf.data.Dataset.from_tensor_slices(['test']).batch(TAMANO_LOTE)

import tensorflow as tf
import math
import matplotlib.pyplot as plt
from tensorflow.keras import layers, models

TAMANO_LOTE = 32
num_ej_entrenamiento = 60000

def preprocess(imagen, etiqueta):
    print("Forma original de la imagen:", imagen.shape)

    if len(imagen.shape) == 2:
        imagen = tf.expand_dims(imagen, axis=-1)

    print("Forma después de expandir dimensiones:", imagen.shape)

    if imagen.shape != (28, 28, 1):
        raise ValueError(f"Se esperaba una imagen con forma (28, 28, 1), pero se obtuvo {imagen.shape}")

    imagen = tf.reshape(imagen, (-1))
    imagen = tf.cast(imagen, tf.float32) / 255.0
    return imagen, etiqueta



import tensorflow as tf
import math
import matplotlib.pyplot as plt
from tensorflow.keras import layers, models

# Suponiendo que tienes datos de entrenamiento y prueba cargados, con datos_entrenamiento como dataset
TAMANO_LOTE = 32
num_ej_entrenamiento = 60000  # Ajusta según tu dataset

# Aseguramos que las imágenes están normalizadas y aplanadas
def preprocess(imagen, etiqueta):
    # Verificar la forma de la imagen antes de procesarla
    print("Forma original de la imagen:", imagen.shape)

    # Si la imagen tiene forma (28, 28), agregamos la dimensión del canal (28, 28, 1)
    if len(imagen.shape) == 2:  # Si no tiene un canal explícito
        imagen = tf.expand_dims(imagen, axis=-1)  # Añadimos



import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

# Cargar el dataset Fashion MNIST
(train_images, train_labels), (test_images, test_labels) = tf.keras.datasets.fashion_mnist.load_data()

# Normalizar las imágenes entre 0 y 1
train_images = train_images / 255.0
test_images = test_images / 255.0

# Expande las dimensiones de las imágenes para que sean de la forma (batch_size, 28, 28, 1)
train_images = np.expand_dims(train_images, axis=-1)  # Forma: (60000, 28, 28, 1)
test_images = np.expand_dims(test_images, axis=-1)    # Forma: (10000, 28, 28, 1)

# Nombres de las clases de Fashion MNIST
nombres_clases = [
    "Camiseta Corta", "Pantalon", "Jersei", "Vestido", "Sudadera", 
    "Sandalia", "Camiseta", "Zapato", "Bolso", "Tacon"
]

# Construir un modelo simple
modelo = tf.keras.Sequential([
    tf.keras.layers.Flatten(input_shape=(28, 28, 1)),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(10, activation='softmax')  # 10 clases
])

# Compilar el modelo
modelo.compile(optimizer='adam',
               loss='sparse_categorical_crossentropy',
               metrics=['accuracy'])

# Entrenar el modelo
modelo.fit(train_images, train_labels, epochs=5)

# Evaluar el modelo en los datos de prueba
test_loss, test_acc = modelo.evaluate(test_images, test_labels)
print(f"Test accuracy: {test_acc}")

# Hacer predicciones con el modelo
predicciones = modelo.predict(test_images)

# Función para graficar las imágenes y sus predicciones
def graficar_imagen(i, arr_predicciones, etiquetas_reales, imagenes):
    arr_predicciones, etiqueta_real, img = arr_predicciones[i], etiquetas_reales[i], imagenes[i]
    plt.grid(False)
    plt.xticks([])  # Eliminar marcas en el eje x
    plt.yticks([])  # Eliminar marcas en el eje y
    
    # Mostrar la imagen en escala de grises
    plt.imshow(img.reshape(28, 28), cmap=plt.cm.binary)

    # Predecir la etiqueta y verificar si es correcta
    etiqueta_prediccion = np.argmax(arr_predicciones)
    if etiqueta_prediccion == etiqueta_real:
        color = 'blue'  # Predicción correcta
    else:
        color = 'red'  # Predicción incorrecta
    
    # Mostrar la etiqueta predicha y la real
    plt.xlabel(f"{nombres_clases[etiqueta_prediccion]} {100 * np.max(arr_predicciones):2.0f}% ({nombres_clases[etiqueta_real]})", color=color)

# Función para graficar el arreglo de predicciones
def graficar_valor_arreglo(i, arr_predicciones, etiqueta_real):
    arr_predicciones, etiqueta_real = arr_predicciones[i], etiqueta_real[i]
    plt.grid(False)
    plt.xticks([])  # Eliminar marcas en el eje x
    plt.yticks([])  # Eliminar marcas en el eje y
    grafica = plt.bar(range(10), arr_predicciones, color="#777777")
    plt.ylim([0, 1])  # Limitar el valor de la predicción entre 0 y 1
    etiqueta_prediccion = np.argmax(arr_predicciones)
    
    # Resaltar la predicción correcta y la incorrecta
    grafica[etiqueta_prediccion].set_color('red')
    grafica[etiqueta_real].set_color('blue')

# Visualización de 25 imágenes y sus predicciones
filas = 5
columnas = 5
num_imagenes = filas * columnas
plt.figure(figsize=(2 * 2 * columnas, 2 * filas))
for i in range(num_imagenes):
    plt.subplot(filas, 2 * columnas, 2 * i + 1)
    graficar_imagen(i, predicciones, test_labels, test_images)
    plt.subplot(filas, 2 * columnas, 2 * i + 2)
    graficar_valor_arreglo(i, predicciones, test_labels)

plt.tight_layout()  # Ajustar la disposición de los subgráficos
plt.show()


imagen = imagenes_prueba[4] #AL ser la variable imagenes_prueba solo tiene lo que se le puso en el bloque anterior heheh
imagen = np.array([imagen])
prediccion = modelo.predict(imagen)

print("Prediccion: " + nombres_clases[np.argmax(prediccion[0])])

modelo.save('modelo_exportado.h5')

!pip install tensorflowjs

!mkdir tfjs_target_dir
!tensorflowjs_converter --input_format keras modelo_exportado.h5 tfjs_target_dir

pip install ydf -U

!ls

!ls tfjs_target_dir
